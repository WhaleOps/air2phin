test_cases:
  # ---------------------------------------------
  # Edge cases
  # ---------------------------------------------
  # parameter value is the keyword migration
  value_same_as_name:
    src: |
      from airflow.operators.bash import BashOperator

      bash = BashOperator(
          task_id='bash_command',
          bash_command='task_id',
      )
    dest: |
      from pydolphinscheduler.tasks.shell import Shell

      bash = Shell(
          name='bash_command',
          command='task_id',
      )
  # without import statement
  without_import_statement:
    src: |
      bash = BashOperator(
          task_id='bash',
          bash_command='echo "Hello World!"',
      )
    dest: |
      bash = BashOperator(
          task_id='bash',
          bash_command='echo "Hello World!"',
      )
  # rule default values but not end with comma in previous line
  add_default_not_comma_previous_line:
    src: |
      from airflow.operators.dummy_operator import DummyOperator

      bash = DummyOperator(
          task_id='dummy',
          abc='def'
      )
    dest: |
      from pydolphinscheduler.tasks.shell import Shell

      bash = Shell(
          name='dummy',
          abc='def', 
      command="echo 'Airflow DummyOperator'"
      )
  # have with itme but not airflow.DAG 
  have_not_dag_with_item:
    src: |
      from contextlib import closing
      from airflow.operators.python import PythonOperator
      from airflow.providers.postgres.hooks.postgres import PostgresHook
      
      def demo():
          connection = PostgresHook.get_connection('postgres_default')
          hook = PostgresHook(connection=connection)
          with closing(hook.get_conn()) as conn:
              with closing(conn.cursor()) as cursor:
                  cursor.execute('SELECT 1')
                  print(cursor.fetchall())
      
      demo = PythonOperator(
          task_id='demo',
          python_callable=demo,
      )
    dest: |
      from contextlib import closing
      from pydolphinscheduler.tasks.python import Python
      from airphin.fake.hooks.postgres import PostgresHook
      
      def demo():
          connection = PostgresHook.get_connection('postgres_default')
          hook = PostgresHook(connection=connection)
          with closing(hook.get_conn()) as conn:
              with closing(conn.cursor()) as cursor:
                  cursor.execute('SELECT 1')
                  print(cursor.fetchall())
      
      demo = Python(
          name='demo',
          definition=demo,
      )
